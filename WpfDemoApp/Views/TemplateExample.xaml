<UserControl x:Class="WpfDemoApp.TemplateExample"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfDemoApp"
        xmlns:controls="clr-namespace:WpfDemoApp.Controls"
        mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="TypedItemTemplates.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <local:LineTemplateSelector x:Key="LineTemplateSelector" />
            <Style x:Key="DefaultBorder" TargetType="Border">
                <Setter Property="BorderBrush" Value="Black" />
                <Setter Property="Margin" Value="0,4" />
                <Setter Property="Padding" Value="8" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid Margin="12,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Border Style="{StaticResource DefaultBorder}" Grid.Row="0">
            <!-- Für statische GUIs völlig ausreichend:
                    Controls irgendwo definieren, ViewModels per DataContext dranhängen
            -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!-- Super-einfach: Control einfach hier definieren, an Properties des ViewModels binden.
                     Wenn man - so wie hier - an Properties von Properties bindet, müssen alle Objekte "auf dem Weg"
                     (hier also das WelcomeModel) ebenfalls INotifyPropertyChanged implementieren!
                     Hängt man Bindings an Properties, die keine Change Notifications liefern - wiederum so wie hier -,
                     sollte man OneTime-Bindings verwenden - WPF räumt die Controls sonst nicht ordentlich auf
                -->
                <TextBlock Grid.Row="0" Text="{Binding WelcomeModel.DisplayName, Mode=OneTime}" />

                <!-- Besser: Control selbst bauen, ans Model hängen - macht alles übersichtlicher und modularer
                        Wichtig: Das ist nicht der Weg, um wiederverwendbare Controls zu bauen - die sollte man zwar auch als
                        UserControl bauen, aber (meistens) ohne vorgefertigtes ViewModel -->
                <controls:SimpleUserList Grid.Row="1" DataContext="{Binding UserListModel, Mode=OneTime}" />

                <TextBlock Grid.Row="2" Text="{Binding AdditionalOptionsModel.DisplayName, Mode=OneTime}" />
            </Grid>
        </Border>

        <Border Style="{StaticResource DefaultBorder}" Grid.Row="1">
            <!-- Der Best-Practices-Weg, wenn wir flexibel sein wollen mit den verwendeten Controls:
                    Views über Templates definieren, ViewModels als Items mitgeben,
                        passendes ViewTemplate über Properties im ViewModel zuordnen
            -->
            <ItemsControl ItemsSource="{Binding LineItems}" ItemTemplateSelector="{StaticResource LineTemplateSelector}" />
        </Border>

        <Border Style="{StaticResource DefaultBorder}" Grid.Row="2">
            <!-- Overkill, um zu zeigen, was geht:
                    Views und ViewModels komplett parametrisieren, die eigentliche XAML-Datei macht nur noch das Layout
            -->
            <ItemsControl ItemsSource="{Binding ModularItems}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding Control}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Border>
    </Grid>
</UserControl>
